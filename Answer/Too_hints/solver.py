from Crypto.Util.number import *
import math, random, gmpy2

p= 103058930877056933401549037003810777562176481360192495666791599919402286193487
q= 89370497539345584325002094334140674636761568629398810418433189385016446145491
d= 3434884664993358227744608623602713297073238863094028430526194434954094554990132722444112850719741021923838006225753905999204016804671560858448274879589207
e= 696683
n= 9210427928355603329188610328490472555471255810270063194726598788867254478553137908248246795363388437678273808964897908838057546980767778407991107778617117
hint1= 5775543263362245101444001704887759258398016947176034764200404353936013541362956273092843532348837185418452341385587987538142333601475954798497004650097421
hint2= 5775543263362245101444001704887759258398016947176034764200404353944486605986303778490085108368246132204536224810050360683494686419135093577708362977026093
ct= 4910915938150131080764087402253758954261251662100173719325433942814146029524841921624601233670435136162465168957074480646070766361514384782360145919626534
print(d)

print("dp=",d%(p-1))
print("dq=",d%(q-1))
phi = (p-1)*(q-1)
assert (e*d)%phi == 1
#n= 9766849193840816826494997187588450286914694186220825350727636496858514040375822647346472671868775342795275158280665240168290308075624556028151160668350847
#hint1= 1195248628067123974910646518745852632997047351687851006955809716450697899497966203485025421657761348932553983021413541630717030254478914850923272723922610
#hint2= 1195248628067123974910646518745852632997047351687851006955809716458574884002496996678397233203226701190939110662520797122600325010704428800908291005676466
#ct= 1370270740735559657742998162141583499400395809080741601538698202196004721815031409820274008765282712564921160000092977443947612371564076543362342646183072
assert n == p*q
for e in range(1,pow(2,20)):

	ei = inverse(e,n)
	tmp1 = (hint1*ei)%n #(dpdq+dqe)
	tmp2 = (hint2*ei)%n #(dpdq+dpe)
	dif = tmp1-tmp2 #dqe-dpe
	if dif < 0: dif = -dif
	if(dif)%e == 0:
		print()
		print(e)
		diff = dif//e #dq-dp
		b = -(e+diff)
		c = (e*diff)-tmp2
		rt = b**2 - 4*c
		r,ch = gmpy2.iroot(rt,2)
		if ch:
			print("find root",int(r))
			d2 = (-b-int(r))//2
			d2 = -d2
			print(d2)
			#assert d2 == d%(q-1)
			d1 = d2+diff
			print(d1)
			#assert d1 == d%(p-1)
			m = random.randrange(n)
			c = pow(m,e,n)
			m1 = pow(c,d2,n)
			m2 = pow(c,d1,n)
			print(math.gcd((m1-m)%n,n))
			print(math.gcd((m2-m)%n,n))
			q = math.gcd((m1-m)%n,n)
			p = n//q
			phi = (p-1)*(q-1)
			d = inverse(e,phi)
			assert (e*d)%phi == 1
			print(d)
			flag = pow(ct,d,n)
			print(long_to_bytes(flag))
		print()
"""
#print(tmp)
m = random.randrange(n)
e = 65537
c = pow(m,e,n)
m1 = pow(c,tmp,n)
print(math.gcd((m1-m)%n,n))
big = 248295089491413532611048629429250507272927342750494754444889085655845395485320744225319331189825088132507794118859427406279438261872065798617957
tdq = 86934978699187786440633848185602133637428848922587164046482022410317198215781
dp = d%(p-1)
dq = d%(q-1)
#print(big)
#print(math.gcd(big,dq))
#print(tmp == ((dp+r)*dq))
#print(dp+r < p)
c = pow(m,e,n)
m1 = pow(c,dq,n)
print(math.gcd((m1-m)%n,n))
"""
